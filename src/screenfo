#!/usr/bin/perl
use strict;
use Data::Dumper;
use List::Util qw(shuffle);
use String::Utils qw(longest);

my $DEBUG = 0;

require("./screenfo.conf");
if($@) {
  warn($@);
}


# imported from configuration file
our($now_playing, $default_colorscheme);
my %wm_list = (
  ratpoison => 'ratpoison',
  stumpwm   => 'stumpwm',
  dwm       => 'dwm',
  wmii      => 'wmii',
);

my @c = ();
for(my $i=0; $i<255;++$i) {
  push(@c, "\033[38;5;$i" . 'm');
}

sub get_kernel {
  open(my $fh, '<', '/proc/version') or warn($!);
  my $version = <$fh>;
  my ($kernel) = $version =~ /(2\.[0-9]\.[0-9]+)/;
  return($kernel);
}

sub get_gtk_info {
  my $wanted = shift // 'theme';
  my ($gtk_theme, $gtk_font, $gtk_icons, $gtk_toolbar_style) = undef;
  if(-f "$ENV{HOME}/.gtkrc-2.0") {
    open(my $fh, '<', "$ENV{HOME}/.gtkrc-2.0") or warn($!);
    while(<$fh>) {
      if(/gtk-theme-name="(.+)"/) {
        $gtk_theme = $1;
        print "GTK Theme: $gtk_theme\n" if($DEBUG);
      }
      if(/gtk-icon-theme-name="(.+)"/) {
        $gtk_icons = $1;
        print "GTK Icons: $gtk_icons\n" if($DEBUG);
      }
      if(/gtk-font-name="(.+)"/) {
        $gtk_font = $1;
        print "GTK Font: $gtk_font\n" if($DEBUG);
      }
      if(/gtk-toolbar-style=([0-9]+)/) {
        $gtk_toolbar_style = $1;
        print "GTK Toolbar Style: $gtk_toolbar_style\n" if($DEBUG);
      }
    }
  }
  return($gtk_theme)         if($wanted eq 'theme');
  return($gtk_icons)         if($wanted eq 'icons');
  return($gtk_font)          if($wanted eq 'font');
  return($gtk_toolbar_style) if($wanted eq 'toolbar');
  return(-1);
}

sub print_out {
  my $color = shift // $default_colorscheme // 'all';
  my $logo = './ascii/bsd';

  open(my $fh, '<', $logo) or die($!);
  my @logo = <$fh>;
  close($fh);

  my %colorschemes = (
    pink  => [53,54,55,56,57,89,161,162,163,164,165,197,198,199,200,201,125,126,127,128],
    green => [22,28,34,35,40,46,47,70,76,82,100,106,112,118,148,154],
    grey  => [233..250],
    all   => [17..255],
    ansi  => [0..16],
  );

  if(exists($colorschemes{$color})) {
    $color = $colorschemes{$color};
  }
  else {
    $color = $colorschemes{ansi};
  }

  @$color = shuffle(@$color);

  my $f = join('', @logo);
  @logo = split(/\n/, $f);

  return(\@logo);
}

my $output = print_out(shift,shift);

my $long = longest(@$output);

@$output[0] = sprintf(
  "%-${long}s %12s: %s", @$output[0], 'OS', ucfirst(get_os())
);
@$output[1] = sprintf(
  "%-${long}s %12s: %s", @$output[1], 'WM', ucfirst(get_wm())
);
@$output[2] = sprintf(
  "%-${long}s %12s: %s", @$output[2], 'Kernel', get_kernel()
);
@$output[3] = sprintf(
  "%-${long}s %12s: %s", @$output[3], 'Theme', ucfirst(get_gtk_info())
);
@$output[4] = sprintf(
  "%-${long}s %12s: %s", @$output[4], 'Icons', ucfirst(get_gtk_info('icons'))
);
@$output[5] = sprintf(
  "%-${long}s %12s: %s", @$output[5], 'Font', ucfirst(get_gtk_info('font'))
);
@$output[6] = sprintf(
  "%-${long}s %12s: %s", @$output[6], 'Toolbar', get_gtk_info('toolbar')
);


for(@$output) {
  # Ugliest hack ever... FIXME
  if(/(.+)\s+([A-Za-z]+: .+)/) {
    print colorme($1), $2, "\n";
  }
  else {
    print colorme($_),"\n";
  }
}

sub colorme {
  my @foo = @_;
  my $f = join('', @foo);
  my @data = split(//, $f);
  my $i = 106;
  my @toreturn;
  my @allcolors = shuffle((16..250));

  for(@data) {
    if($i == 250) {
      $i = 0;
    }
    if($_ eq '') {
      push(@toreturn, $_);
    }
    else {
      push(@toreturn, "\e[38;5;$allcolors[$i]" . 'm' . $_ . "\e[0m");
    }
    $i++;
  }
  return(@toreturn);
}

sub get_wm { return('ratpoison'); }

sub get_os { return($^O); }

# vim: set tw=0 nowrap:
